/// \file
/// File Name:                      dump_training_data.cpp \n
/// Date created:                   Wed Jan 18 2017 \n
/// Engineers:                      Conor Gardner \n
/// Special Compile Instructions:   --std=c++11 \n
/// Compiler:                       g++ \n
/// Target OS:                      Ubuntu Linux 16.04 \n
/// Target architecture:            x86 64-bit \n */

#include <fstream>
#include <iostream>
#include <string>

/// \brief Create a log of each 3x3 input pixel and corresponding output pixel
/// as a csv array to be consumed by tensorflow.  
/// See hotspot.cu::calculate_temp
/// \return The number of training elements written (aka the number of 9-element
/// items written.
unsigned dump_csv_training_data
(
    
    /// [in] Row-major array of grid-points used as an input to the temperature
    /// calculator
    const float* source_temperature_matrix,
    
    /// [in] Row-major array of grid points which represents one time step after
    /// source_matrix_temperature generated by 
    const float* destination_temperature_matrix,
    
    /// [in] The number of pixels in a single row of
    /// source_matrix_temperature and destination_matrix_temperature
    unsigned width,
    
    /// [in] The number of pixels in a single column of
    /// source_matrix_temperature and destination_matrix_temperature
    unsigned height,
    
    /// [in] The name of a file to open and overwrite with a python array of
    /// training data where each training point is a set of 9 pixels from
    /// source_matrix_temperature used to compute the corresponding output
    /// pixel.  This will also be the name of the python array written to this
    /// file.  Use only alphanumeric characters and underscores.
    const std::string& source_filename,
    
    /// [in] The name of a file to open and overwrite with a python array of
    /// training data where each training point is a single pixel from
    /// destination_matrix_temperature.  This will also be the name of the
    /// python array written to this file.  Use only alphanumeric characters and
    /// underscores.
    const std::string& destination_filename
    
){
    
    /// Open file for training inputs
    std::ofstream source_file(source_filename.c_str());
    if (!source_file.good())
    {
        std::cerr
            << "Error.  Failed to open \""
            << source_filename
            << "\" for writing.\n";
        return 0;
    }
    
    // Open file for training outputs
    std::ofstream destination_file(destination_filename.c_str());
    if (!destination_file.good())
    {
        std::cerr
            << "Error.  Failed to open \""
            << destination_filename
            << "\" for writing.\n";
        return 0;
    }
    
    // We will ignore border pixels for similicity.  Abort if the image contains
    // only border pixels.
    if (width < 2 || height < 2)
        return 0;
    
    // Ignore border pixels for simplicity
    unsigned bound_x = width - 1;
    for (unsigned iy = 1, bound_y = height - 1; iy < bound_y; iy++)
    {
        
        unsigned offset = iy * width;
        const float* source_row_above = source_temperature_matrix + (offset - width);
        const float* source_row_locus = source_temperature_matrix + offset;
        const float* source_row_below = source_temperature_matrix + (offset + width);
        const float* destination_row = destination_temperature_matrix + offset;
        for (unsigned ix = 1; ix < bound_x; ix++)
        {
            
            source_file
                << source_row_above[ix - 1] << ", " << source_row_above[ix] << ", " << source_row_above[ix + 1] << ", "
                << source_row_locus[ix - 1] << ", " << source_row_locus[ix] << ", " << source_row_locus[ix + 1] << ", "
                << source_row_below[ix - 1] << ", " << source_row_below[ix] << ", " << source_row_below[ix + 1] << '\n';
            destination_file << destination_row[ix] << '\n';
            
        }
        
    }
    
    // Return the number of training elements written
    return (width - 2) * (height - 2);
    
}

