/// \file
/// File Name:                      dump_training_data.h \n
/// Date created:                   Tues Feb 21 2017 \n
/// Engineers:                      Conor Gardner \n
/// Special Compile Instructions:   --std=c++11 \n
/// Compiler:                       g++ \n
/// Target OS:                      Ubuntu Linux 16.04 \n
/// Target architecture:            x86 64-bit \n */
/// See html/index.html for documentation.
 
#ifndef HEADER_GUARD_DUMP_TRAINING_DATA
#define HEADER_GUARD_DUMP_TRAINING_DATA

/// \brief Create a log of each 2D temperature timestep where each timestep is
/// dumped to a file.
/// See hotspot.cu::calculate_temp
/// \return The number of training elements written (aka the number of pixels
/// in 'temperature_matrix'.
unsigned dump_full_csv_training_data
(
    
    /// [in] Row-major array of grid-points used as an input to the temperature
    /// calculator
    const float* temperature_matrix,
    
    // We don't need the destination_teperature_matrix since the output file of
    // time step n is also the input for time step n + 1
    
    /// [in] The number of pixels in a single row of
    /// source_matrix_temperature and destination_matrix_temperature
    unsigned width,
    
    /// [in] The number of pixels in a single column of
    /// source_matrix_temperature and destination_matrix_temperature
    unsigned height,
    
    /// [in] The name of a file to open and overwrite with a csv array of
    /// training data.  The first line of the file is the total number of
    /// elements in the file (aka width * height).  Even though the temperature
    /// grid is 2D, the data is flattened and written out with one element per
    /// line.  The data is written out in row major order.
    const std::string& filename
    
);

/// \brief Create a log of each 3x3 input pixel and corresponding output pixel
/// as a csv array to be consumed by tensorflow.  
/// See hotspot.cu::calculate_temp
/// \return The number of training elements written (aka the number of 9-element
/// items written.
unsigned dump_3x3_csv_training_data
(
    
    /// [in] Row-major array of grid-points used as an input to the temperature
    /// calculator
    const float* source_temperature_matrix,
    
    /// [in] Row-major array of grid points which represents one time step after
    /// source_matrix_temperature generated by 
    const float* destination_temperature_matrix,
    
    /// [in] The number of pixels in a single row of
    /// source_matrix_temperature and destination_matrix_temperature
    unsigned width,
    
    /// [in] The number of pixels in a single column of
    /// source_matrix_temperature and destination_matrix_temperature
    unsigned height,
    
    /// [in] The name of a file to open and overwrite with a python array of
    /// training data where each training point is a set of 9 pixels from
    /// source_matrix_temperature used to compute the corresponding output
    /// pixel.  This will also be the name of the python array written to this
    /// file.  Use only alphanumeric characters and underscores.
    const std::string& source_filename,
    
    /// [in] The name of a file to open and overwrite with a csv array of
    /// training data where each training point is a single pixel from
    /// destination_matrix_temperature.  This will also be the name of the
    /// python array written to this file.  Use only alphanumeric characters and
    /// underscores.
    const std::string& destination_filename
    
);

#endif // header guard

